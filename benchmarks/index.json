{
    "benchmarks": {
        "benchmarks.AGWS.time_gmt_propagate": {
            "code": "def time_gmt_propagate(self):\n    self.gs.reset()\n    self.gmt.propagate(self.gs)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.AGWS.time_gmt_propagate", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.AGWS.time_process": {
            "code": "def time_process(self):\n    self.wfs.process()\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.AGWS.time_process", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.AGWS.time_propagate": {
            "code": "def time_propagate(self):\n    self.wfs.reset()\n    self.wfs.propagate(self.gs)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.AGWS.time_propagate", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.AGWS.time_readOut": {
            "code": "def time_readOut(self):\n    self.wfs.readOut(1,0.5)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.AGWS.time_readOut", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeGmtOneGuideStar.time_ShackHartman": {
            "code": "def time_ShackHartman(self):\n    self.gs.reset()\n    self.wfs.reset()\n    self.wfs.propagate(self.gs)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeGmtOneGuideStar.time_ShackHartman", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 180.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeGmtOneGuideStar.time_atmosphereGetPhaseScreen": {
            "code": "def time_atmosphereGetPhaseScreen(self):\n    dxy = self.L/(self.nPx-1)\n    self.gs.reset()\n    self.atm.get_phase_screen(self.gs,dxy,self.nPx,dxy,self.nPx,0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeGmtOneGuideStar.time_atmosphereGetPhaseScreen", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 180.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeGmtOneGuideStar.time_atmosphereRayTRacing": {
            "code": "def time_atmosphereRayTRacing(self):\n    dxy = self.L/(self.nPx-1)\n    self.gs.reset()\n    self.atm.ray_tracing(self.gs,dxy,self.nPx,dxy,self.nPx,0.0)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeGmtOneGuideStar.time_atmosphereRayTRacing", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 180.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeGmtOneGuideStar.time_gmtRayTracing": {
            "code": "def time_gmtRayTracing(self):\n    self.gmt.reset()\n    self.gs.reset()\n    self.gmt.propagate(self.gs)        \n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeGmtOneGuideStar.time_gmtRayTracing", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 180.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "benchmarks.TimeLtao.time_ltao_estimation": {
            "code": "def time_ltao_estimation(self):\n    self.src_lmmse.reset()\n    self.src_lmmse.estimation(self.cog)\n", 
            "goal_time": 2.0, 
            "name": "benchmarks.TimeLtao.time_ltao_estimation", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }
    }, 
    "date_to_hash": {
        "1395804223000": "d56bd970", 
        "1425097179000": "501f7632", 
        "1435015883000": "49aecb0a", 
        "1445128316000": "398be8a7", 
        "1456528837000": "5ee3261d", 
        "1456899940000": "ce3055ed", 
        "1456947284000": "1893c26a", 
        "1456948796000": "3e7178ef", 
        "1456949861000": "86445401", 
        "1459274773000": "56451b57"
    }, 
    "machines": {
        "Ubuntu CUDA 7.0": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz", 
            "machine": "Ubuntu CUDA 7.0", 
            "os": "Linux 3.13.0-44-generic", 
            "ram": "15400916", 
            "version": 1
        }, 
        "Ubuntu CUDA 7.0 GRID K520": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz", 
            "machine": "Ubuntu CUDA 7.0 GRID K520", 
            "os": "Linux 3.13.0-44-generic", 
            "ram": "15400916", 
            "version": 1
        }
    }, 
    "params": {
        "arch": [
            "x86_64"
        ], 
        "branch": [
            "master"
        ], 
        "cpu": [
            "Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz"
        ], 
        "machine": [
            "Ubuntu CUDA 7.0", 
            "Ubuntu CUDA 7.0 GRID K520"
        ], 
        "os": [
            "Linux 3.13.0-44-generic"
        ], 
        "python": [
            "2.7"
        ], 
        "ram": [
            "15400916"
        ]
    }, 
    "project": "CEO", 
    "project_url": "http://rconan.github.io/CEO/", 
    "show_commit_url": "http://github.com/rconan/CEO/commit/", 
    "tags": {}
}