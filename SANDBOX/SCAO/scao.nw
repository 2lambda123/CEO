% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\section{Single Conjugated Adaptive Optics System}
\label{sec:single-conj-adapt}

This is a collection of programs dealing with NGS and LGS single--conjugated AO systems. 
All programs must include the following headers which also contains the headers for all the CEO library modules.
<<main header>>=
#include <stdio.h>
#ifndef __CEO_H__
#include "ceo.h"
#endif
#ifndef __SOURCE_H__
#include "source.h"
#endif
#ifndef __ATMOSPHERE_H__
#include "atmosphere.h"
#endif
#ifndef __IMAGING_H__
#include "imaging.h"
#endif
#ifndef __CENTROIDING_H__
#include "centroiding.h"
#endif
#ifndef __AASTATS_H__
#include "aaStats.h"
#endif
#ifndef __BTBT_H__
#include "BTBT.h"
#endif
#ifndef __GBTBT_H__
#include "GBTBT.h"
#endif
#ifndef __ITERATIVESOLVERS_H__
#include "iterativeSolvers.h"
#endif
#ifndef __LMMSE_H__
#include "LMMSE.h"
#endif
@
And the main function of each program is:
<<scao.bin>>=
<<main header>>
int main(int argc,char *argv[]) {
<<setup>>
<<wavefront>>
<<NGS wavefront>>
<<NGS wavefront estimation>>
<<LGS wavefront>>
<<LGS wavefront estimation>>
<<LTAO wavefronts and wavefront gradients>>
<<LTAO wavefront estimation>>
<<saving to files>>
<<cleanup>>
}

@
\subsection{Setting--up}
\label{sec:setting-up}

Lets define the sources first:
\begin{itemize}
\item the science sources,
<<setup>>=
source src;
src.setup(ARCSEC(0) , 0, INFINITY,(N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1), "SRC");
<<cleanup>>=
src.cleanup();
@ \item the NGS
<<setup>>=
source ngs;
ngs.setup(ARCSEC(0) , 0, INFINITY, "NGS");
<<cleanup>>=
ngs.cleanup();
@ \item the LGS
<<setup>>=
source lgs;
lgs.setup(ARCSEC(0) , 0, 90e3, "LGS");
<<cleanup>>=
lgs.cleanup();
@ \end{itemize}

@ The atmosphere is now defined:
<<setup>>=
atmosphere atm;
//atm.setup(20e-2,30,10e3,10,0);
atm.gmt_setup(15e-2,60);
/*
float altitude[] = {0, 10e3},
xi0[] = {0.5, 0.5},
wind_speed[] = {10, 10},
wind_direction[] = {0, 0};
atm.setup(20e-2,30,altitude, xi0, wind_speed, wind_direction);
*/
@ and cleared:
<<cleanup>>=
atm.cleanup();
@ The wavefront sensor centroid container is defined:
<<setup>>=
centroiding cog;
cog.setup();
<<cleanup>>=
cog.cleanup();
@ The diameter of the telescope is set to:
<<setup>>=
float D = 25; // telescope diameter in meter
@ leading to a lenslet size of:
<<setup>>=
float d = D/N_SIDE_LENSLET;

@  Finally we setup the statistical tool:
<<setup>>=
stats S;
S.setup();
<<cleanup>>=
S.cleanup();
@
\subsection{Turbulence wavefront}
\label{sec:turbulence-wavefront}

Lets compute the wavefront propagated through the atmosphere from [[src]]
<<setup>>=
int NP, NP2;
NP = N_SIDE_LENSLET+1;
NP2 = NP*NP;
<<wavefront>>=
float wf_rms;
// NGS
atm.get_phase_screen(&src,d,NP,d,NP,0);
wf_rms = 1E9*S.std(src.wavefront.phase, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
@  We also compute the wavefront gradient:
<<NGS wavefront>>=
atm.get_phase_screen_gradient(&cog,N_SIDE_LENSLET,d,&ngs,0);
//dev2file("ngs_cog.bin",cog.d__c,2*_N_LENSLET_);
<<LGS uplink wavefront>>=
float lgs_theta_x, lgs_theta_y;
atm.get_phase_screen_gradient(&cog, 1,d,&lgs,0);
<<LGS wavefront>>=
atm.get_phase_screen_gradient(&cog,N_SIDE_LENSLET,d,&lgs,0);
@ The wavefront is written to the disk
<<saving to files>>=
dev2file("phaseScreenLowRes.bin", src.wavefront.phase, NP2);
@
\subsection{Wavefront reconstruction}
\label{sec:wavefr-reconstr}

In the following, the wavefront is reconstructed from the centroids:
<<NGS wavefront estimation>>=
printf("\n___ ON-AXIS WAVEFRONT ESTIMATE FROM NGS ___\n");
LMMSE ngs_lmmse;
ngs_lmmse.setup(&atm,&ngs,1,&ngs,1,d,_N_LENSLET_*2,"MINRES");
ngs_lmmse.estimation(cog.d__c, 100);
phase_est = ngs_lmmse.d__phase_est;
//ngs_lmmse.aa.toFile("ngs_aa.bin");
//ngs_lmmse.pa.toFile("ngs_pa.bin");
<<wavefront error>>
dev2file("phaseEst.bin", ngs_lmmse.d__phase_est, (N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1));
ngs_lmmse.cleanup();
printf("------------------------------\n");

<<LGS wavefront estimation>>=
printf("\n___ ON-AXIS WAVEFRONT ESTIMATE FROM LGS ___\n");
LMMSE lgs_lmmse;
lgs_lmmse.setup(&atm,&lgs,1,&src,1,d,_N_LENSLET_*2,"MINRES");
lgs_lmmse.estimation(cog.d__c,100);
//lgs_lmmse.aa.toFile("ngs-lgs_aa.bin");
//lgs_lmmse.pa.toFile("ngs-lgs_pa.bin");
phase_est = lgs_lmmse.d__phase_est_i;
<<wavefront error>>
  //printf("lgs_lmmse.PS_E_N_PX=%d\n",lgs_lmmse.PS_E_N_PX);
dev2file("phaseEstLgs.bin", lgs_lmmse.d__phase_est, lgs_lmmse.PS_E_N_PX);
dev2file("phaseEstLgsItp.bin", lgs_lmmse.d__phase_est_i, NP2);
lgs_lmmse.cleanup();
printf("------------------------------\n");

@ The wavefront error is computed with
<<setup>>=
cublasHandle_t handle;
cublasCreate(&handle);
float *d__wavefront_error, *phase_est;
HANDLE_ERROR( cudaMalloc((void**)&d__wavefront_error, sizeof(float)* NP2) );
float alpha;
<<cleanup>>=
cublasDestroy(handle);
HANDLE_ERROR( cudaFree(d__wavefront_error) );

<<wavefront error>>=
CUBLAS_ERROR( cublasScopy(handle, NP2, src.wavefront.phase, 1, d__wavefront_error, 1) );
alpha = -1;//phase2nm;
CUBLAS_ERROR( cublasSaxpy(handle, NP2, &alpha, phase_est, 1, d__wavefront_error, 1) );
wf_rms = 1E9*S.std(d__wavefront_error, NP2);
printf("\n WFE RMS: %8.3fnm\n",wf_rms);

@ 
\section{LTAO}
\label{sec:ltao}

For the LTAO wavefront estimation, the LGS constellation is defined first.
We will use 3 LGSs on a 15 arcsec radius ring.
<<setup>>=
int N_GS = 6;
float gs_radius = 15;
// 3 LGS on a ring
/*
float zenith[] = {ARCSEC(gs_radius),ARCSEC(gs_radius),ARCSEC(gs_radius)},
  azimuth[] = {0,2.*PI/3.,4.*PI/3.};
*/
// 6 LGS on a ring
float zenith[] = {ARCSEC(30),ARCSEC(30),ARCSEC(30),ARCSEC(30),ARCSEC(30)},
  azimuth[] = {0,2.*PI/6.,4.*PI/6.,6.*PI/6.,8.*PI/6.,10.*PI/6.,12.*PI/6.};

source gs_ast;
gs_ast.setup(zenith,azimuth,90e3,N_GS,NP2);
<<cleanup>>=
gs_ast.cleanup();

@ The wavefront sensor of the LGS asterism are setup next
<<setup>>=
centroiding gs_ast_cog;
gs_ast_cog.setup(_N_LENSLET_,N_GS);
<<cleanup>>=
gs_ast_cog.cleanup();

@ The 3 source are propagated through the atmosphere to the wavefront sensor.
<<LTAO wavefronts and wavefront gradients>>=
atm.get_phase_screen(&gs_ast,N_GS,d,NP,d,NP,0);
gs_ast.wavefront.phase2file("gsAstWavefronts.bin");
atm.get_phase_screen_gradient(&gs_ast_cog,N_SIDE_LENSLET,d,&gs_ast,N_GS,0);
//dev2file("gs_ast_cog.bin",gs_ast_cog.d__c,2*_N_LENSLET_*N_GS);

@ We solve:
<<LTAO wavefront estimation>>=
printf("\n___ ON-AXIS WAVEFRONT ESTIMATE FROM LGS ASTERISM ___\n");
LMMSE gs_ast_lmmse;
gs_ast_lmmse.setup(&atm,&gs_ast,N_GS,&src,1,d,_N_LENSLET_*2,"MINRES");
//gs_ast_lmmse.aa.toFile("gs_ast_aaCovariance.bin");
//gs_ast_lmmse.pa.toFile("gs_ast_paCovariance.bin");
gs_ast_lmmse.estimation(gs_ast_cog.d__c,100);
phase_est = gs_ast_lmmse.d__phase_est_i;
<<wavefront error>>
dev2file("phaseEstLtao.bin", gs_ast_lmmse.d__phase_est, gs_ast_lmmse.PS_E_N_PX);
dev2file("phaseEstLtaoItp.bin", gs_ast_lmmse.d__phase_est_i, NP2);
gs_ast_lmmse.cleanup();
printf("------------------------------\n");

<<cleanup>>=
cudaDeviceReset();
