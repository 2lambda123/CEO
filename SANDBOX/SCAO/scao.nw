% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\section{Single Conjugated Adaptive Optics System}
\label{sec:single-conj-adapt}

This is a collection of programs dealing with NGS and LGS single--conjugated AO systems. 
All programs must include the following headers which also contains the headers for all the CEO library modules.
<<main header>>=
#ifndef __CEO_H__
#include "ceo.h"
#endif
#ifndef __SOURCE_H__
#include "source.h"
#endif
#ifndef __ATMOSPHERE_H__
#include "atmosphere.h"
#endif
#ifndef __IMAGING_H__
#include "imaging.h"
#endif
#ifndef __CENTROIDING_H__
#include "centroiding.h"
#endif
#ifndef __AASTATS_H__
#include "aaStats.h"
#endif
#ifndef __BTBT_H__
#include "BTBT.h"
#endif
#ifndef __ITERATIVESOLVERS_H__
#include "iterativeSolvers.h"
#endif
#ifndef __LMMSE_H__
#include "LMMSE.h"
#endif
@
And the main function of each program is:
<<scao.bin>>=
<<main header>>
int main(int argc,char *argv[]) {
<<setup>>
<<wavefront>>
<<wavefront reconstruction>>
<<paStats MVM alternative>>
<<saving to files>>
<<cleanup>>
}

@
\subsection{Setting--up}
\label{sec:setting-up}

Lets define the sources first:
\begin{itemize}
\item the science source,
<<setup>>=
source src, *d__src;
src.setup(ARCSEC(0) , 0, INFINITY);
HANDLE_ERROR( cudaMalloc( (void**)&d__src, sizeof(source)*_N_SOURCE_ ) );
HANDLE_ERROR( cudaMemcpy( d__src, &src,
			  sizeof(source)*_N_SOURCE_ ,
			  cudaMemcpyHostToDevice ) );
<<cleanup>>=
HANDLE_ERROR( cudaFree( d__src) );
@ The atmosphere is now defined:
@ \item the wavefront sensor source
<<setup>>=
source wfs_src, *d__wfs_src;
wfs_src.setup(ARCSEC(0) , 0, 90e3);
HANDLE_ERROR( cudaMalloc( (void**)&d__wfs_src, sizeof(source)*_N_SOURCE_ ) );
HANDLE_ERROR( cudaMemcpy( d__wfs_src, &wfs_src,
			  sizeof(source)*_N_SOURCE_ ,
			  cudaMemcpyHostToDevice ) );
<<cleanup>>=
HANDLE_ERROR( cudaFree( d__wfs_src) );
@ \end{itemize}

@ The atmosphere is now defined:
<<setup>>=
atmosphere atm;
atm.setup(20e-2,30,10e3,10,0);
//atm.gmt_setup();
//atm.reset();
@ and cleared:
<<cleanup>>=
atm.cleanup();
@ The wavefront sensor centroid container is defined:
<<setup>>=
centroiding cog;
cog.setup();
<<cleanup>>=
cog.cleanup();
@ The diameter of the telescope is set to:
<<setup>>=
float D = 8; // telescope diameter in meter
@ leading to a lenslet size of:
<<setup>>=
float d = D/N_SIDE_LENSLET;
@  The linear minimum mean square error wavefront reconstructor is initialized with the atmosphere, the lenslet array pitch, the number of slopes and the iterative solver type and destroyed with
<<setup>>=
LMMSE lmmse;
lmmse.setup(&atm,wfs_src.height,d,_N_LENSLET_*2,"MINRES");
//lmmse.pa.toFile("paCovariance.bin");
<<cleanup>>=
lmmse.cleanup();
@  Finally we setup the statistical tool:
<<setup>>=
stats S;
S.setup();
<<cleanup>>=
S.cleanup();
@
\subsection{Turbulence wavefront}
\label{sec:turbulence-wavefront}

Lets compute the wavefront propagated through the atmosphere from [[src]]
<<setup>>=
int NP, NP2;
NP = 2*N_SIDE_LENSLET+1;
NP2 = NP*NP;
<<wavefront>>=
float delta_e = d/2;
atm.get_phase_screen(d__src->phase,delta_e,NP,delta_e,NP,d__src,0);
float phase2nm = 1E9*atm.wavelength/2/PI;
float wf_rms = phase2nm*S.std(d__src->phase, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
@  We also compute the wavefront gradient:
<<wavefront>>=
atm.get_phase_screen_gradient(cog.d__cx,cog.d__cy,N_SIDE_LENSLET,d,d__wfs_src,0);
@ The wavefront is written to the disk
<<saving to files>>=
dev2file("phaseScreenLowRes.bin", d__src->phase, NP2);
@
\subsection{Wavefront reconstruction}
\label{sec:wavefr-reconstr}

In the following, the wavefront is reconstructed from the centroids:
<<wavefront reconstruction>>=
lmmse.estimation(cog.d__c, 100);
wf_rms = phase2nm*S.std(lmmse.d__phase_est, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
<<wavefront error>>
dev2file("phaseEst.bin", lmmse.d__phase_est, NP2);

<<paStats MVM alternative>>=
lmmse.pa.MVM(lmmse.d__phase_est,lmmse.d__ce,
	     delta_e, 1, NP,
	     delta_e, 1.0-1.0/9.0, NP);
wf_rms = phase2nm*S.std(lmmse.d__phase_est, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
<<wavefront error>>
dev2file("phaseEstAlt.bin", lmmse.d__phase_est, NP2);

@ The wavefront error is computed with
<<setup>>=
cublasHandle_t handle;
cublasCreate(&handle);
float *d__wavefront_error;
HANDLE_ERROR( cudaMalloc((void**)&d__wavefront_error, sizeof(float)* NP2) );
float alpha = -1;

<<cleanup>>=
cublasDestroy(handle);
HANDLE_ERROR( cudaFree(d__wavefront_error) );

<<wavefront error>>=
CUBLAS_ERROR( cublasScopy(handle, NP2, d__src->phase, 1, d__wavefront_error, 1) );
CUBLAS_ERROR( cublasSaxpy(handle, NP2, &alpha, lmmse.d__phase_est, 1, d__wavefront_error, 1) );
wf_rms = phase2nm*S.std(d__wavefront_error, NP2);
printf("\n WFE RMS: %8.3fnm\n",wf_rms);


