% -*- mode: Noweb; noweb-code-mode: c-mode -*-
[[aaStats]] contains a structure and the routines to compute the covariance matrix of the angle--of--arrival.
The aaStats structure is written in the header:
<<aaStats.h>>=
#ifndef __AASTATS_H__
#define __AASTATS_H__

#ifndef __CEO_H__
#include "ceo.h"
#endif

#ifndef __ATMOSPHERE_H__
#include "atmosphere.h"
#endif

struct aaStats {

  <<aaStats parameters>>

  void setup(int N, atmosphere *atm, float lenslet_pitch);

  void cleanup(void);

  void info(void);

};
#endif // __AASTATS_H__
@ The routines are expanded in the source file:
<<aaStats.cu>>=
#include "aaStats.h"

<<sinc>>

<<subaperture PSF>>

<<phase power spectrum>>

<<power spectrum kernel>>

<<covariance extraction>>

<<setup>>

<<cleanup>>

<<info>>

@
Shack--Hartmann WFS centroids are a measure of the spatial derivatives of the wavefront averaged on each subaperture.
These derivatives are often referred as angle of arrivals:
\begin{eqnarray}
  \label{eq:1}
  \alpha_x &=& {\lambda\over 2\pi d^2} {\partial\varphi\over\partial x} \ast \Pi\left(x\over d\right)\Pi\left(y\over d\right),\\
  \alpha_y &=& {\lambda\over 2\pi d^2} {\partial\varphi\over\partial y} \ast \Pi\left(x\over d\right)\Pi\left(y\over d\right),
\end{eqnarray}
where $\lambda$ is the sensing wavelength and $d$ in the size of one subaperture.

The covariance is derived from the power spectrum density of the angle of arrivals $W_{\vec \alpha \cdot\ \vec \beta}(\vec f)$:
  \begin{equation}
    \label{eq:2}
    W_{\vec \alpha\vec \beta}(\vec f) = \lambda^2\left( \vec f \cdot \vec\alpha \right)\left( \vec f \cdot \vec\beta \right) W_\varphi(\vec f) G^2(\vec f)
  \end{equation}
$W_\varphi(f)$ is the wavefront power spectrum density given by
\begin{equation}
  \label{eq:3}
  W_\varphi(f) = 0.0229 r_0^{-5/3} \left( f^2 + {1\over\mathcal L_0^2} \right)^{-11/6}.
\end{equation}
$G(\vec f)$ is the point spread function of a subaperture of the WFS,
\begin{equation}
  \label{eq:4}
  G(\vec f) = {\sin(\pi d f_x) \over \pi d f_x }{ \sin(\pi d f_y) \over \pi d f_y } .
\end{equation}

The covariance $C_{\vec \alpha \cdot\ \vec \beta}(\vec\rho)$ is derived from the Wiener--Khinchine theorem:
\begin{equation}
  \label{eq:5}
  C_{\vec \alpha \cdot\ \vec \beta}(\vec\rho) = \mathcal F^{-1} \left[ W_{\vec \alpha\vec \beta}(\vec f) \right] (\vec\rho)
\end{equation}
where $\mathcal F^{-1}$ stands for the inverse Fourier transform.

The covariance is computed when the setup function is called with the size of a block, an [[atmosphere]] structure and the lenslet pitch:
<<setup>>=
void aaStats::setup(int N_, atmosphere *atm, float lenslet_pitch)
{
  float alpha[2] = {1,0}, beta[2] = {0,1}, kappa; 
  N = N_;
  NU = 2*N-1;
  NU2 = NU*NU;
  NF = 1024;
  NF2 = NF*NF;
  kappa = 4;

  psd_size = sizeof(float2)*NF2*4;
  cov_size = sizeof(float2)*NU2*4;
  HANDLE_ERROR( cudaMalloc((void**)&d__psd, psd_size ) );
  HANDLE_ERROR( cudaMalloc((void**)&d__alpha, 2*sizeof(float) ) );
  HANDLE_ERROR( cudaMalloc((void**)&d__beta,  2*sizeof(float) ) );
  HANDLE_ERROR( cudaMemcpy( d__alpha, alpha, 2*sizeof(float), cudaMemcpyHostToDevice) );
  HANDLE_ERROR( cudaMemcpy( d__beta, beta, 2*sizeof(float), cudaMemcpyHostToDevice) );
  HANDLE_ERROR( cudaMalloc((void**)&d__cov, cov_size ) );

  printf("\n@(CEO)>imaging: Creating a 2D FFT plan\n");
  int n_DFT[2] = {NF, NF};
  int iodist = NF2;
  int BATCH = 4;
  /* Create a 2D FFT plan. */
  if (cufftPlanMany(&plan, 2, n_DFT,
		    NULL, 1, iodist,
		    NULL, 1, iodist,
		    CUFFT_C2C,BATCH) != CUFFT_SUCCESS) {
    fprintf(stderr,
	    "CUFFT Error: Unable to create plan\n");
    return;
  }
  if (cufftSetCompatibilityMode(plan, CUFFT_COMPATIBILITY_NATIVE)!= CUFFT_SUCCESS) {
    fprintf(stderr,
	    "CUFFT Error: Unable to set compatibility mode to native\n");
    return;
  }

  printf("\n@(CEO)>imaging: Creating a 2D FFT plan\n");
  /* Create a 2D FFT plan. */
  if (cufftPlanMany(&raster_plan, 1, &NU2,
		    NULL, 1, NU2,
		    NULL, 1, NU2,
		    CUFFT_C2C,BATCH) != CUFFT_SUCCESS) {
    fprintf(stderr,
	    "CUFFT Error: Unable to create plan\n");
    return;
  }
  if (cufftSetCompatibilityMode(raster_plan, CUFFT_COMPATIBILITY_NATIVE)!= CUFFT_SUCCESS) {
    fprintf(stderr,
	    "CUFFT Error: Unable to set compatibility mode to native\n");
    return;
  }

 info();  

  <<power spectrum>>
  HANDLE_ERROR( cudaDeviceSynchronize() );
  psd = (float2 *)malloc( psd_size );
  HANDLE_ERROR( cudaMemcpy( psd, d__psd, psd_size, cudaMemcpyDeviceToHost) );
  if (NF<=8) {
    int k;
    for (int i=0;i<NF;i++) {
      printf("|");
      for (int j=0;j<NF;j++) {
	k = i*NF + j;
	printf("|(%d,%d)%+4.2E;%+4.2E|",i,j,psd[k].x,psd[k].y);
      }
      printf("|\n");
    }
  }

  <<covariance>>
  cov = (float2 *)malloc( cov_size );
  HANDLE_ERROR( cudaMemcpy( cov, d__cov, cov_size, cudaMemcpyDeviceToHost) );
  if (N<=16) {
    int k;
    for (int i=0;i<NU;i++) {
      printf("|");
      for (int j=0;j<NU;j++) {
	k = i*(NU) + j;
	printf("|(%d,%d)%+4.2E|",i,j,cov[k].x);
      }
      printf("|\n");
    }
  }

  <<raster covariance FT>>
  HANDLE_ERROR( cudaMemcpy( cov, d__cov, cov_size, cudaMemcpyDeviceToHost) );
  for (int k=0;k<NU2;k++)
    printf("%2d: %+4.2E %+4.2E.I||%+4.2E %+4.2E.I||%+4.2E %+4.2E.I||%+4.2E%+4.2E.I\n",k,
	   cov[k].x,cov[k].y,
	   cov[k+NU2].x,cov[k+NU2].y,
	   cov[k+2*NU2].x,cov[k+2*NU2].y,
	   cov[k+3*NU2].x,cov[k+3*NU2].y);

}
@ The main parameters of [[aaStats]] are displayed with the [[info]] routine:
<<info>>=
void aaStats::info(void)
{
  printf("\n@(CEO)>aaStats:\n");
  printf(" . number of blocks: %dX%d\n",N,N);
  printf(" . size of blocks: %dX%d\n",N,N);
  float n_total = powf(N,4), n_unique = powf(NU,2);
  printf(" . compression factor: %4.0f \n",n_total/n_unique);
  printf("----------------------------------------------------\n");
}
@ 
<<cleanup>>=
void aaStats::cleanup(void)
{
  printf("\n@(CEO)>aaStats: freeing memory!\n");
  cufftDestroy(plan);
  cufftDestroy(raster_plan);
  HANDLE_ERROR( cudaFree( d__psd ) );
  HANDLE_ERROR( cudaFree( d__alpha ) );
  HANDLE_ERROR( cudaFree( d__beta ) );
  HANDLE_ERROR( cudaFree( d__cov ) );
  free(psd);		
  free(cov);		
}
@
The parameters of the [[aaStats]] structure are:
<<aaStats parameters>>=
  int N, NU, NU2, NF, NF2, psd_size, cov_size;
float2 *d__cov, *d__psd, *psd, *cov;
float *d__alpha, *d__beta;
cufftHandle plan, raster_plan;
@ 
The power spectrum  must be sampled such as its Fourier transform gives unbiased values of the covariance.
The largest spatial frequency is $f_{max}=\kappa/2d$ with $\kappa\ge 1$.
The number of sample is given by $[[N_F]]\ge [[N_SIDE_LENSLET]]$.
The spatial frequencies are given by
\begin{eqnarray}
  \label{eq:6}
  f_{x,y} &=& (i,j){2\over [[NF]] }{\kappa\over 2d}, (i,j) \in \left[ 0,\dots,[[NF]]/2-1\right] \\
  f_{x,y} &=& (i,j){2\over [[NF]] }{\kappa\over 2d}, (i,j) \in \left[ [[NF]]/2,\dots,[[NF]]-1\right] 
\end{eqnarray}
Note that [[NF]] must be even.
<<power spectrum>>=
dim3 blockDim(16,16);
dim3 gridDim( 1+NF/16 , 1+NF/16 );
powerSpectrum LLL gridDim,blockDim RRR (d__psd, NF, lenslet_pitch, 
					atm->wavelength, atm->r0, atm->turbulence.L0,
					d__alpha, d__alpha, kappa);
powerSpectrum LLL gridDim,blockDim RRR (d__psd + NF2, NF, lenslet_pitch,
					atm->wavelength, atm->r0, atm->turbulence.L0,
					d__beta, d__beta, kappa);
powerSpectrum LLL gridDim,blockDim RRR (d__psd + NF2*2, NF, lenslet_pitch,
					atm->wavelength, atm->r0, atm->turbulence.L0,
					d__alpha, d__beta, kappa);
powerSpectrum LLL gridDim,blockDim RRR (d__psd + NF2*3, NF, lenslet_pitch,
					atm->wavelength, atm->r0, atm->turbulence.L0,
					d__beta, d__alpha, kappa);
@ The power spectrum is computed with the following kernel:
<<power spectrum kernel>>=
  __global__ void powerSpectrum(float2 *d__psd, int NF, float d,
				float wavelength, float r0, float L0,
				float *alpha, float *beta, float kappa)
{
  int i, j, k;
  float fx, fy, f_square, fs;
  i = blockIdx.x * blockDim.x + threadIdx.x;
  j = blockIdx.y * blockDim.y + threadIdx.y;
  k = i*NF + j;
  if ( (i<NF) && (j<(NF)) ) {
    fx = (float) i;
    fy = (float) j;
    if (i>=(NF/2))
      fx = fx - NF;
    if (j>=(NF/2))
      fy = fy - NF;
    fs = (2.0/NF)*(kappa/2*d);
    fx *= fs;
    fy *= fs;
    k = i*NF + j;
    f_square = fx*fx + fy*fy;
    wavelength *= wavelength;
    fs *= fs;
    d__psd[k].x = fs*wavelength*(fx*alpha[0] + fy*alpha[1])*(fx*beta[0] + fy*beta[1])*
      powf(r0,-5.0/3.0)*
      phasePowerSpectrum(f_square, 1.0/L0)*
      gatePSF(fx*d,fy*d);
    d__psd[k].y = 0;
  }
}
@ 
The phase power spectrum is given by:
<<phase power spectrum>>=
 __device__ float phasePowerSpectrum(float f_square, float f0) {
  return 0.0229*powf(f_square + f0*f0,-11.0/6.0);
}
@ 
The subaperture Fourier transform is written in
<<subaperture PSF>>=
__device__ float gatePSF(float fx, float fy) {
  float out;
  out = sinc(fx)*sinc(fy);
  return out*out;
}
@ that depends on the $sinc$ function:
<<sinc>>=
__device__ float sinc(float x) {
  return (x==0) ? 1.0 : sinf( PI*x) / (PI*x) ; 
}
@ 
The covariance derived from the power spectrum is sampled every $\rho_s=d/\kappa$.
The covariance derived from the slopes of the lenslet array is sampled every $d$.
Consequently the lenslet--array--slope--covariance is extracted from the power--spectrum--covariance at $(i\kappa,j\kappa)$.
Due to the symmetry of the Fourier transform output, the subscripts in the power--spectrum--covariance are in fact given by
\begin{eqnarray}
  \label{eq:8}
  (i,j)\kappa, (i,j) \in \left[ 0,\dots,[[N]]-1 \right] \\
  \left[(i,j)-[[NU]]\right]\kappa + [[NF]], (i,j) \in \left[ [[N]],\dots,[[NU]]-1 \right]
\end{eqnarray}

The lenslet--array--slope--covariance is shifted such as the baseline coordinate $(0,0$) is a the center of the array i.e.
\begin{equation}
  \label{eq:7}
  (i,j) \leftarrow \left[ (i,j) + (2[[N]]-2)/2 \right] \mod ( 2[[N]]-1 )
\end{equation}
<<covariance>>=
if (cufftExecC2C(plan, d__psd, d__psd, CUFFT_FORWARD) 
    != CUFFT_SUCCESS){
  fprintf(stderr,"CUFFT Error: Unable to execute plan\n");
 }
if (cudaThreadSynchronize() != cudaSuccess){
  fprintf(stderr, "Cuda error: Failed to synchronize\n");
 }
blockDim = dim3(16,16);
gridDim = dim3( 1+NU/16 , 1+NU/16 );
covariance_extraction LLL gridDim,blockDim RRR( d__cov, NU, d__psd, NF, kappa);
covariance_extraction LLL gridDim,blockDim RRR( d__cov + NU2, NU, d__psd + NF2, NF, kappa);
covariance_extraction LLL gridDim,blockDim RRR( d__cov + 2*NU2, NU, d__psd + 2*NF2, NF, kappa);
covariance_extraction LLL gridDim,blockDim RRR( d__cov + 3*NU2, NU, d__psd + 3*NF2, NF, kappa);
@ The extraction of the covariance is done with the kernel:
<<covariance extraction>>=
__global__ void covariance_extraction(float2 *cov_out, int NC_out, 
				      float2 *cov_in, int NC_in, float kappa)
{
  int i, j, k_out, k_in, h;
  i = blockIdx.x * blockDim.x + threadIdx.x;
  j = blockIdx.y * blockDim.y + threadIdx.y;
  if ( (i<NC_out) && (j<(NC_out)) ) {
    h = (NC_out-1)/2;
    k_out = ((i+h)%NC_out)*NC_out + (j+h)%NC_out;
    if (i>=((NC_out+1)/2))
      i = kappa*(i - NC_out) + NC_in;
    else
      i *= kappa;
    if (j>=(NC_out+1)/2)
      j = kappa*(j - NC_out) + NC_in;
    else
      j *= kappa;
    k_in = i*NC_in + j;      
    cov_out[k_out].x = cov_in[k_in].x;
    cov_out[k_out].y = 0.0;
  }
}
@ 
The 1D Fourier transform is now applied to the raster covariance
<<raster covariance FT>>=
if (cufftExecC2C(raster_plan, d__cov, d__cov, CUFFT_FORWARD) 
    != CUFFT_SUCCESS){
  fprintf(stderr,"CUFFT Error: Unable to execute plan\n");
 }
if (cudaThreadSynchronize() != cudaSuccess){
  fprintf(stderr, "Cuda error: Failed to synchronize\n");
 }
@  
The test routine is written:
<<aaStats.bin>>=

#include "ceo.h"
#include "aaStats.h"

int main( void) {
  atmosphere atm;
  aaStats C;
  float altitude[] = {0},
        xi0[] = {1},
        wind_speed[] = {10},
  	wind_direction[] = {0};
  atm.setup(0.15,30,altitude,xi0,wind_speed,wind_direction);
  C.setup(4,&atm,1);
  atm.cleanup();
  C.cleanup();
}
