
Laser Tomography
================

Phase screens are computed with an ``Atmosphere`` and a ``Source``
object. Lets import the ``ceo`` module first.

.. code:: python

    import math
    import numpy as np
    from ceo import ceo
    %pylab inline

.. parsed-literal::

    Populating the interactive namespace from numpy and matplotlib


The atmosphere is defined with

.. code:: python

    atm =  ceo.GmtAtmosphere(0.15,60)
A constellation of 6 Laser guide stars evenly located on a 1 arcmin
diameter circle is defined first,

.. code:: python

    NL = 60
    NA = NL+1
    lgs = ceo.Source("V",
                     zenith=np.ones(6)*30*math.pi/180/3600,
                     azimuth=np.linspace(0,5,6)*2*math.pi/6,
                     height = 90e3,
                     resolution=(NA,NA))
The telescope pupil is defined as the Giant Magellan Telescope and mask
for the deformable mirror actuators is also set.

.. code:: python

    D = 25.5
    #tel = ceo.Telescope(NL*16)
    #dm  = ceo.Telescope(NA)
    tel = ceo.GMT(NL*16,D)
    dm  = ceo.Mask(NA)
A ``Centroiding`` object is defined, it will contains the phase screen
gradient corresponding to the LGS. The ``fried_geometry`` method
computes the DM valid actuator mask according to the telescope pupil
shape and the given intensity ``threshlod``. The ``lgs`` ``Source``
object is masked with the dm mask.

.. code:: python

    d = D/NL
    cog = ceo.Centroiding(NL,N_SOURCE=lgs.size)
    cog.fried_geometry(dm, tel, 16, 0.5)
    lgs.masked(dm)
.. code:: python

    dm_mask = dm.f
The phase screen gradient is computed with the ``Atmosphere`` method
``get_phase_screen_gradient``. The gradient is computed over a square
lenslet array of size :math:`N_L \times N_L` with :math:`d` the pitch in
meter. The phase screen gradient is computed for a given ``Source``
object that contains one or more guide stars. The phase screen gradient
can be computed for a given time delay. The :math:`c_x` and :math:`c_y`
centroids are saved in a ``Centroiding`` object.

.. code:: python

    atm.get_phase_screen_gradient(cog,NL,d,lgs,0.0)
    c = cog.c.host(units='arcsec')
.. code:: python

    imshow(c.reshape(NL*lgs.size*2,NL).transpose(),interpolation='none')
    #ceog.heatmap(c.reshape(NL*6*2,NL).transpose(), filename=PLOTLY_PATH+"wavefront gradient")



.. parsed-literal::

    <matplotlib.image.AxesImage at 0x7f1850247b90>




.. image:: LaserTomography_files/LaserTomography_14_1.png


The on-axis source is defined and is propagated throught the atmosphere:

.. code:: python

    src = ceo.Source("K",resolution=(NA,NA))
    src.masked(dm)
    atm.get_phase_screen(src,d,NA,d,NA,0.0)
From the phase gradient, the phase screen can be reconstructed with a
linear minimim mean square error reconstructor (LMMSE). A ``Lmmse``
object is used to perform the phase estimation. The parameters are: - an
``Atmosphere`` object, - a ``Source`` object representing the guide
star(s), - a ``Source`` object representing the star(s) in the
estimation direction(s), - the wavefront sampling step in meter, - the
number of sample across the wavefront, - a ``Mask`` object representing
the pupil, - the iterative solver.

.. code:: python

    src_lmmse = ceo.Lmmse(atm,lgs,src,d,NL,dm,"MINRES")
    src_lmmse.estimation(cog)
    src_phase = src.phase
    src_lmmse_phase = src_lmmse.phase
    ps_e = src_lmmse_phase.host(units='micron',
                                zm=True,mask=dm_mask.host()) - src_phase.host(units='micron',zm=True,mask=dm_mask.host_data)
    print "wavefront error: %6.2fnm" % (np.std(ps_e[dm_mask.host_data!=0])*1e3)

.. parsed-literal::

    wavefront error: 124.60nm


.. code:: python

    imshow(np.concatenate((src_phase.host_data, src_lmmse_phase.host_data),axis=1),
                 interpolation='none')
    colorbar()



.. parsed-literal::

    <matplotlib.colorbar.Colorbar instance at 0x7f1850116a70>




.. image:: LaserTomography_files/LaserTomography_19_1.png


.. code:: python

    imshow(ps_e*1e3,interpolation='none')
    colorbar()



.. parsed-literal::

    <matplotlib.colorbar.Colorbar instance at 0x7f1847f05368>




.. image:: LaserTomography_files/LaserTomography_20_1.png


Wavefront error vs. LGS radius
------------------------------

.. code:: python

    azi = np.linspace(0,5,6)*2*math.pi/6
    zen_radius = np.linspace(5,60,12)
    zen_radius



.. parsed-literal::

    array([  5.,  10.,  15.,  20.,  25.,  30.,  35.,  40.,  45.,  50.,  55.,
            60.])



.. code:: python

    def eval_wfe(_zen_radius,n_sample):
        print "LGS asterism radius: %4.1farcsec" % _zen_radius
        lgs = ceo.Source("V",
                     zenith=np.ones(6)*_zen_radius*math.pi/180/3600,
                     azimuth=azi,
                     height = 90e3,
                     resolution=(NA,NA))
        src_lmmse = ceo.Lmmse(atm,lgs,src,d,NL,dm,"MINRES")
        var_ps_e = 0
        for k_sample in range(n_sample):
            atm.reset()
            atm.get_phase_screen_gradient(cog,NL,d,lgs,0.0)
            src_lmmse.estimation(cog)
            atm.get_phase_screen(src,d,NA,d,NA,0.0)
            src.masked(dm)
            src_phase = src.phase
            src_lmmse_phase = src_lmmse.phase
            ps_e = src_lmmse_phase.host(units='micron') - src_phase.host(units='micron')
            var_ps_e += np.var(ps_e[dm_mask.host_data!=0])
        std_ps_e =  math.sqrt(var_ps_e/n_sample)*1e3
        print " -> wavefront error: %6.2fnm" % (std_ps_e)
        return std_ps_e
.. code:: python

    wfe = [eval_wfe(x,200) for x in zen_radius]

.. parsed-literal::

    LGS asterism radius:  5.0arcsec
     -> wavefront error: 207.93nm
    LGS asterism radius: 10.0arcsec
     -> wavefront error: 173.42nm
    LGS asterism radius: 15.0arcsec
     -> wavefront error: 151.42nm
    LGS asterism radius: 20.0arcsec
     -> wavefront error: 140.41nm
    LGS asterism radius: 25.0arcsec
     -> wavefront error: 133.78nm
    LGS asterism radius: 30.0arcsec
     -> wavefront error: 135.30nm
    LGS asterism radius: 35.0arcsec
     -> wavefront error: 138.99nm
    LGS asterism radius: 40.0arcsec
     -> wavefront error: 144.96nm
    LGS asterism radius: 45.0arcsec
     -> wavefront error: 148.69nm
    LGS asterism radius: 50.0arcsec
     -> wavefront error: 154.39nm
    LGS asterism radius: 55.0arcsec
     -> wavefront error: 160.21nm
    LGS asterism radius: 60.0arcsec
     -> wavefront error: 164.41nm


.. code:: python

    plot(zen_radius,wfe)
    grid()


.. image:: LaserTomography_files/LaserTomography_25_0.png


