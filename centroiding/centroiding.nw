% -*- mode: Noweb; noweb-code-mode: c-mode -*-
The centroiding header and source are written
<<centroiding.h>>=
#ifndef __CENTROIDING_H__
#define __CENTROIDING_H__

#ifndef __CEO_H__
#include "ceo.h"
#endif

struct centroiding {

  float *d__c, *d__cx, *d__cy, *d__mass;

  void setup(void);

  void cleanup(void);
   
  void get_data(float *frame, float cx0, float cy0);

};

#endif  // __CENTROIDING_H__
@
<<centroiding.cu>>=
#include "centroiding.h"

<<centroiding>>

<<setup>>

<<cleanup>>
   
<<data>>
@ Parameters are allocated with the [[setup]] routine
<<setup>>=
void centroiding::setup(void) {
  printf("\n@(CEO)>allocating: allocating memory!\n");
  HANDLE_ERROR( cudaMalloc( (void**)&d__c   , sizeof(float) *_N_LENSLET_*_N_SOURCE_*2 ) );
  d__cx = d__c;
  d__cy = d__c + _N_LENSLET_*_N_SOURCE_;
  HANDLE_ERROR( cudaMalloc( (void**)&d__mass , sizeof(float) *_N_LENSLET_*_N_SOURCE_ ) );     
}
@ and de--allocated with the [[cleanup]] routine
<<cleanup>>=
void centroiding::cleanup(void) {
  printf("\n@(CEO)>centroiding: freeing memory!\n");
  HANDLE_ERROR( cudaFree( d__c ) );
  HANDLE_ERROR( cudaFree( d__mass ) );
}
@ 
The framelets are processed to retrieve centroids and flux
<<data>>=
void centroiding::get_data(float *frame, float cx0, float cy0) {
     dim3 blockGrid(N_SIDE_LENSLET,N_SIDE_LENSLET*_N_SOURCE_);
     dim3 threadGrid(_N_PX_CAMERA_,1);
     centroidingEngine LLL blockGrid , threadGrid RRR (d__cx, d__cy,
						       d__mass, frame,
						       cx0, cy0);
}
@ 
The framelets are processed with the kernel:
<<centroiding>>=
__global__ void centroidingEngine(float *cx, float *cy,
				  float *flux, const float *frame,
				  float cx0, float cy0)
{
  int u, k, i, ij, ij_inc, iLenslet,jLenslet;
  u = threadIdx.x;
  iLenslet = blockIdx.x;
  jLenslet = blockIdx.y;
  /* kLenslet = iLenslet*NSIDE_LENSLET + jLenslet; */
  k = blockIdx.x*N_SIDE_LENSLET*_N_SOURCE_ + blockIdx.y;
  
  __shared__ float buffer[_N_PX_CAMERA_][3];

  // CENTROIDING
  if (u<_N_PX_CAMERA_)
    {
      buffer[u][0] = buffer[u][1] = buffer[u][2] = 0.0;
      // ij = iLenslet*_N_PX_CAMERA_ + u;
      // ij *= N_SIDE_LENSLET*_N_PX_CAMERA_*_N_SOURCE_;
      // ij += jLenslet*_N_PX_CAMERA_;
      //      ij = (u+k*_N_PX_CAMERA_)*_N_PX_CAMERA_;
      ij = lenslet2array(u, 0, _N_PX_CAMERA_, 
			 iLenslet, jLenslet, N_SIDE_LENSLET, 
			 0, _N_SOURCE_);
      for (i=0;i<_N_PX_CAMERA_;i++)
	{
	  ij_inc = ij + i;
	  buffer[u][0]  += frame[ij_inc];
	  buffer[u][1]  += u*frame[ij_inc];
	  buffer[u][2]  += i*frame[ij_inc];
	}
    }
  
  __syncthreads();

  if (u<1)
  {
      flux[k]  = cx[k] = cy[k] = 0.0;
      for (i=0;i<_N_PX_CAMERA_;i++)
      {
          flux[k] += buffer[i][0];
          cx[k]   += buffer[i][1];
          cy[k]   += buffer[i][2];
      }
      if (flux[k]>0)
      {
          cx[k] /= flux[k];
	  cx[k] -= cx0;
          cy[k] /= flux[k];
	  cy[k] -= cy0;
      }
  }
}
