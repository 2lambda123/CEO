% -*- mode: Noweb; noweb-code-mode: python-mode -*-

\section{PXD file}
\label{sec:pxd-file}


<<imaging.pxd>>=
from source cimport source, Source
from utilities cimport cuFloatArray
from shackHartmann cimport ShackHartmann
from pyramid cimport Pyramid
from segmentPistonSensor cimport SegmentPistonSensor
cdef extern from "imaging.h":
    cdef cppclass imaging:
        int N_PX_PUPIL, N_DFT, N_SIDE_LENSLET, N_PX_CAMERA, N_SOURCE, N_FRAME
        float photoelectron_gain, N_PHOTON_PER_FRAME
        float *d__frame
        void setup(int , int , int , int , int, int)
        void cleanup()
        void set_pointing_direction(float , float )
        void propagate(source *)
        void propagateThroughFieldStop(source *, float field_stop_diam)
        void propagateThroughPyramid(source *)
        void propagateThroughModulatedPyramid(source *, float)
        void readout(float, float)
        void reset()
        void reset_rng(int)
<<class definitions>>
@
\subsection{Class definitions}
\label{sec:class-definitions}

<<class definitions>>=
cdef class Imaging:
    cdef:
        imaging *_c_imaging
        readonly int N_SIDE_LENSLET, N_PX_PUPIL, DFT_osf, \
                     N_PX_IMAGE, BIN_IMAGE, N_SOURCE, N_PX_FRAME
        readonly cuFloatArray frame
        char isPtr
@
\section{PYX file}
\label{sec:pyx-file}

\index{imaging!python!Imaging}
<<imaging.pyx>>=
from scipy.optimize import bisect
import numpy as np
cdef class Imaging:
    """
    Creates an imaging object.

    Parameters
    ----------
    N_PX_PUPIL : int
       The sampling in pixel of one lenslet.
    N_SIDE_LENSLET : int
       The linear size of the lenslet array (>=1).
    DFT_osf : int
       The oversampling factor for the Discrete Fourier Transform (>=1).
    N_PX_IMAGE : int
       The sampling in pixel of the imagelet (>=1).
    BIN_IMAGE : int
       The binning factor of the imagelet (>=1).
    N_SOURCE : int
       The number of guide stars (>=1).

    Attributes
    ----------
    N_SIDE_LENSLET : int
       The linear size of the lenslet array (>=1).
    N_PX_PUPIL : int
       The sampling in pixel of one lenslet.
    DFT_osf : int
       The oversampling factor for the Discrete Fourier Transform
    N_PX_IMAGE : int
       The sampling in pixel of the imagelet
    BIN_IMAGE : int
       The binning factor of the imagelet
    N_GS : int
       The number of guide stars
    N_PX_FRAME : int
        The detector resolution
    frame : cuFloatArray
        The detector frame of size [`N_SOURCE`x`N_PX_CAMERA`,`N_PX_CAMERA`]
    photoelectron_gain : float
        The photon to electron conversion gain of the camera

    See also
    --------
    cuFloatArray : class acting as the interface between GPU host and device

    """

    def __cinit__(self, *args, **kwargs):
        self._c_imaging = new imaging()

    def __init__(self, int N_SIDE_LENSLET, int N_PX_PUPIL,
		 DFT_osf=2, N_PX_IMAGE=None, BIN_IMAGE=1,
		 N_SOURCE=1,
		 ShackHartmann wfs=None,
		 SegmentPistonSensor sps=None,
		 Pyramid pym=None):
        if N_PX_IMAGE is None:
            N_PX_IMAGE = N_PX_PUPIL;
        self.N_SIDE_LENSLET = N_SIDE_LENSLET
        self.N_PX_PUPIL     = N_PX_PUPIL
        self.DFT_osf        = DFT_osf
        self.N_PX_IMAGE     = N_PX_IMAGE
        self.BIN_IMAGE      = BIN_IMAGE
        self.N_PX_FRAME     = self.N_PX_IMAGE*self.N_SIDE_LENSLET/self.BIN_IMAGE
        self.N_SOURCE       = N_SOURCE
        if wfs is not None:
            self.isPtr = 1
            self._c_imaging = &(wfs._c_shackHartmann.camera)
        elif sps is not None:
            self.isPtr = 1
            self._c_imaging = &(sps._c_segmentPistonSensor.camera)
	elif pym is not None:
            self.isPtr = 1
            self._c_imaging = &(pym._c_pyramid.camera)
        else:
            self.isPtr = 0
            if N_PX_IMAGE is None:
                N_PX_IMAGE = N_PX_PUPIL
            self._c_imaging.setup(N_PX_PUPIL, N_SIDE_LENSLET,
                                  DFT_osf, N_PX_IMAGE,
                                  BIN_IMAGE, N_SOURCE)
        self.frame = cuFloatArray(shape=(self.N_SOURCE*self.N_PX_FRAME,
				         self.N_PX_FRAME))
        self.frame._c_gpu.dev_data = self._c_imaging.d__frame

    def __dealloc__(self):
        if not self.isPtr:
            self._c_imaging.cleanup()

    def propagate(self, Source src):
        """
        Propgates a source through the lenset to detector in the focal plane

        Parameters
        ----------
        src : Source
            A source object

        See also
        --------
        Source : class modeling star objects
        """		       
        self._c_imaging.propagate(src._c_source)

    def propagateThroughFieldStop(self, Source src, float field_stop_diam):
        """
        Propgates a source through the lenset then through a field stop in 
        the focal plane and to a pupil plane

        Parameters
        ----------
        src : Source
            A source object
        field_stop_diam : float
            The diameter of the field stop in units of :math:`\lambda/D`

        See also
        --------
        Source : class modeling star objects
        """		       
        self._c_imaging.propagateThroughFieldStop(src._c_source, field_stop_diam)

    def propagateThroughPyramid(self, Source src, float modulation=0.0):
        """
        Propgates a source through a pyramid wavefront sensor to a detector in a pupil plane

        Parameters
        ----------
        src : Source
            A source object
        modulation : float
            The pyramid modulation amplitude in units of :math:`\lambda/D`; default: 0.0

        See also
        --------
        Source : class modeling star objects
        """		       
        if modulation>0.0:
            self._c_imaging.propagateThroughModulatedPyramid(src._c_source,
                                                             modulation)
        else:
            self._c_imaging.propagateThroughPyramid(src._c_source)

    def readOut(self,float exposureTime, float readOutNoiseRms):
        """
        Reads-out the detector

        Parameters
        ----------
        exposureTime : float
            The exposure time of the camera
        readOutNoiseRms : float
            The read-out moise rms of the camera
        """
        self._c_imaging.readout(exposureTime,readOutNoiseRms)

    def reset(self):
        """
        Resets the frame of the camera to 0
        """
        self._c_imaging.reset()

    def reset_rng(self, int SEED):
        """
        Resets the random number generator
        """
        self._c_imaging.reset_rng(SEED)

    def ee80(self,double units=1.0):
        """
        Computes the 80% ensquared energy patch size
        
        Parameters
        ----------
        units : double
            The units to convert the 80% ensquared energy to

        Returns
        -------
        delta : double
            The 80% ensquared energy patch size in pixel (default) or units if given
        """
        cdef:
            int n, m
            double q
            double[:,::1] x, y, gate
            double[:] u, v
        psf   = self.frame.host()
        n,m   = psf.shape
        #u     = np.linspace(-1.0,1.0,n)*(n/2.0)
        #v     = np.linspace(-1.0,1.0,m)*(m/2.0)
        u     = np.arange(n,dtype=np.float64)-(n-1)*0.5
        v     = np.arange(m,dtype=np.float64)-(m-1)*0.5
        x,y   = np.meshgrid(u,v)
        def ee80_fun(float ee_Delta):
            _ee_Delta_ = ee_Delta/2.0
            gate = np.logical_and(np.abs(x)<=_ee_Delta_,np.abs(y)<=_ee_Delta_)
            return np.sum(psf*gate)/(self._c_imaging.N_PHOTON_PER_FRAME*self._c_imaging.N_FRAME) - 0.8
        try:
            q = bisect(ee80_fun,3,n)
        except ValueError:
            q = np.float('inf')
        return q*units

    property photoelectron_gain:
        def __get__(self):
            return self._c_imaging.photoelectron_gain
        def __set__(self,float value):
            self._c_imaging.photoelectron_gain = value

    property N_FRAME:
        def __get__(self):
            return self._c_imaging.N_FRAME
@
\index{imaging!python!JImaging}
<<imaging.pyx>>=
from utilities import JSONAbstract
class JImaging(JSONAbstract,Imaging):
    """
    """
    def __init__(self, jprms = None, jsonfile = None):
        JSONAbstract.__init__(self,jprms=jprms, jsonfile=jsonfile)
	Imaging.__init__(self,1,self.jprms["pupil sampling"]-1,
			 DFT_osf    = 2*self.jprms["nyquist factor"],
			 N_PX_IMAGE = self.jprms["resolution"],
			 N_SOURCE   = self.jprms["guide star #"])
