% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\section{Single Conjugated Adaptive Optics System}
\label{sec:single-conj-adapt}

This is a collection of programs dealing with NGS and LGS single--conjugated AO systems. 
All programs must include the following headers which also contains the headers for all the CEO library modules.
<<main header>>=
#ifndef __CEO_H__
#include "ceo.h"
#endif
#ifndef __SOURCE_H__
#include "source.h"
#endif
#ifndef __ATMOSPHERE_H__
#include "atmosphere.h"
#endif
#ifndef __IMAGING_H__
#include "imaging.h"
#endif
#ifndef __CENTROIDING_H__
#include "centroiding.h"
#endif
#ifndef __AASTATS_H__
#include "aaStats.h"
#endif
#ifndef __BTBT_H__
#include "BTBT.h"
#endif
#ifndef __ITERATIVESOLVERS_H__
#include "iterativeSolvers.h"
#endif
#ifndef __LMMSE_H__
#include "LMMSE.h"
#endif
@
And the main function of each program is:
<<scao.bin>>=
<<main header>>
int main(int argc,char *argv[]) {
<<setup>>
<<wavefront>>
<<wavefront reconstruction>>
<<saving to files>>
<<cleanup>>
}

@
\subsection{Setting--up}
\label{sec:setting-up}

Lets define the source first:
<<setup>>=
source src, *d__src;
src.setup(ARCSEC(0) , 0, INFINITY);
HANDLE_ERROR( cudaMalloc( (void**)&d__src, sizeof(source)*_N_SOURCE_ ) );
HANDLE_ERROR( cudaMemcpy( d__src, &src,
			  sizeof(source)*_N_SOURCE_ ,
			  cudaMemcpyHostToDevice ) );
@ and then one de--allocates the source on the device:
<<cleanup>>=
HANDLE_ERROR( cudaFree( d__src) );
@ The atmosphere is now defined:
<<setup>>=
atmosphere atm;
float altitude[] = {10e3},
  xi0[] = {1},
  wind_speed[] = {10},
  wind_direction[] = {0};
atm.setup(20e-2,30,altitude,xi0,wind_speed,wind_direction);
@ cleared:
<<cleanup>>=
atm.cleanup();
@ The wavefront sensor centroid container is defined:
<<setup>>=
centroiding cog;
cog.setup();
<<cleanup>>=
cog.cleanup();
@ The diameter of the telescope is set to:
<<setup>>=
float D = 8; // telescope diameter in meter
@ leading to a lenslet size of:
<<setup>>=
float d = D/N_SIDE_LENSLET;
@  The linear minimum mean square error wavefront reconstructor is initialized and destroyed with
<<setup>>=
LMMSE lmmse;
lmmse.setup(&atm,d,_N_LENSLET_*2,"MINRES");
<<cleanup>>=
lmmse.cleanup();
@  Finally we setup the statistical tool:
<<setup>>=
stats S;
S.setup();
<<cleanup>>=
S.cleanup();
@
\subsection{Turbulence wavefront}
\label{sec:turbulence-wavefront}

Lets compute the wavefront propagated through the atmosphere from [[src]]
<<wavefront>>=
float *d__phase_screen_low_res;
int NP, NP2;
NP = 2*N_SIDE_LENSLET+1;
NP2 = NP*NP;
HANDLE_ERROR( cudaMalloc( (void**)&d__phase_screen_low_res, sizeof(float)*NP2 ) );
float delta_e = d/2;
atm.get_phase_screen(d__phase_screen_low_res,delta_e,NP,delta_e,NP,d__src,0);
float phase2nm = 1E9*atm.wavelength/2/PI;
float wf_rms = phase2nm*S.std(d__phase_screen_low_res, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
<<cleanup>>=
cudaFree(d__phase_screen_low_res);
@  We also compute the wavefront gradient:
<<wavefront>>=
atm.get_phase_screen_gradient(cog.d__cx,cog.d__cy,N_SIDE_LENSLET,d,d__src,0);
@ The wavefront is written to the disk
<<saving to files>>=
float *phase_screen_low_res;
phase_screen_low_res = (float*)malloc(sizeof(float)*NP2);
HANDLE_ERROR( cudaMemcpy( phase_screen_low_res, d__phase_screen_low_res,
			  sizeof(float)*NP2,
			  cudaMemcpyDeviceToHost ) );
FILE *fid;
fid = fopen("phaseScreenLowRes.bin","wb");
fwrite(phase_screen_low_res,sizeof(float),NP2,fid);
fclose(fid);
<<cleanup>>=
free(phase_screen_low_res);
@
\subsection{Wavefront reconstruction}
\label{sec:wavefr-reconstr}

<<wavefront reconstruction>>=
lmmse.estimation(cog.d__c, 100);
wf_rms = phase2nm*S.std(lmmse.d__phase_est, NP2);
printf("\n WF RMS: %7.2fnm\n",wf_rms);
<<saving to files>>=
HANDLE_ERROR( cudaMemcpy( phase_screen_low_res, lmmse.d__phase_est,
			  sizeof(float)*NP2,
			  cudaMemcpyDeviceToHost ) );
fid = fopen("phaseEst.bin","wb");
fwrite(phase_screen_low_res,sizeof(float),NP2,fid);
fclose(fid);
